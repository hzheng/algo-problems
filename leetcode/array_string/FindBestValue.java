import java.util.*;

import org.junit.Test;

import static org.junit.Assert.*;

// LC1300: https://leetcode.com/problems/sum-of-mutated-array-closest-to-target/
//
// Given an integer array arr and a target value target, return the integer value such that when we
// change all the integers larger than value in the given array to be equal to value, the sum of the
// array gets as close as possible (in absolute difference) to target.
// In case of a tie, return the minimum such integer.
// Notice that the answer is not necessarily a number from arr.
//
// Constraints:
// 1 <= arr.length <= 10^4
// 1 <= arr[i], target <= 10^5
public class FindBestValue {
    // Sort
    // time complexity: O(N*log(N)), space complexity: O(log(N))
    // 5 ms(25.54%), 39.3 MB(41.29%) for 19 tests
    public int findBestValue(int[] arr, int target) {
        Arrays.sort(arr);
        int res = 0;
        int minDiff = Integer.MAX_VALUE / 2;
        for (int i = -1, sum = 0, n = arr.length; ; i++) {
            int a = (i >= 0) ? arr[i] : 0;
            sum += a;
            if (i == n - 1) {
                return (Math.abs(sum - target) < minDiff) ? a : res;
            }
            for (int cand = (target - sum) / (n - i - 1), k = 2; k > 0; k--, cand++) {
                int diff = Math.abs(cand * (n - i - 1) + sum - target);
                if (cand >= a && cand <= arr[i + 1] && diff < minDiff) {
                    res = cand;
                    minDiff = diff;
                }
            }
        }
    }

    // Sort
    // time complexity: O(N*log(N)), space complexity: O(log(N))
    // 3 ms(64.20%), 39 MB(84.96%) for 19 tests
    public int findBestValue2(int[] arr, int target) {
        Arrays.sort(arr);
        int n = arr.length;
        int i = 0;
        int remain = target;
        while (i < n && remain > arr[i] * (n - i)) {
            remain -= arr[i++];
        }
        if (i == n) { return arr[n - 1]; }

        int res = remain / (n - i);
        if (remain - res * (n - i) > (res + 1) * (n - i) - remain) {
            res++;
        }
        return res;
    }

    // Binary Search
    // time complexity: O(N*log(MAX)), space complexity: O(1)
    // 2 ms(97.37%), 39 MB(84.96%) for 19 tests
    public int findBestValue3(int[] arr, int target) {
        int max = 0;
        for (int a : arr) {
            max = Math.max(max, a);
        }
        int low = 1;
        for (int high = max; low < high; ) {
            int mid = (low + high) >>> 1;
            int sum = 0;
            for (int a : arr) {
                sum += Math.min(a, mid);
            }
            if (sum >= target) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        int sum1 = 0;
        int sum2 = 0;
        for (int a : arr) {
            sum1 += Math.min(a, low);
            sum2 += Math.min(a, low - 1);
        }
        return (Math.abs(sum2 - target) <= Math.abs(sum1 - target)) ? low - 1 : low;
    }

    // Binary Search
    // time complexity: O(N*log(MAX)), space complexity: O(1)
    // 2 ms(97.37%), 39 MB(84.96%) for 19 tests
    public int findBestValue4(int[] arr, int target) {
        int max = -1;
        for (int a : arr) {
            max = Math.max(max, a);
        }
        int minDiff = target;
        int res = max;
        for (int low = 0, high = max; low <= high; ) {
            int mid = (low + high) >>> 1;
            int sum = 0;
            for (int a : arr) {
                sum += Math.min(a, mid);
            }
            if (sum > target) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
            int diff = Math.abs(target - sum);
            if (diff < minDiff) {
                minDiff = diff;
                res = mid;
            } else if (diff == minDiff) {
                res = Math.min(res, mid);
            }
        }
        return res;
    }

    private void test(int[] arr, int target, int expected) {
        assertEquals(expected, findBestValue(arr.clone(), target));
        assertEquals(expected, findBestValue2(arr.clone(), target));
        assertEquals(expected, findBestValue3(arr.clone(), target));
        assertEquals(expected, findBestValue4(arr, target));
    }

    @Test public void test() {
        test(new int[] {4, 9, 3}, 10, 3);
        test(new int[] {2, 3, 5}, 10, 5);
        test(new int[] {60864, 25176, 27249, 21296, 20204}, 56803, 11361);
        test(new int[] {75602, 71538, 4704, 30214, 94441, 39803, 14224, 94618, 74265, 18242, 42480,
                        78564, 10891, 94971, 71795, 68481, 86244, 52401, 11858, 10975, 21157, 34759,
                        92109, 95954, 64727, 16451, 5979, 36379, 68869, 88400, 15676, 23208, 46784,
                        15, 30, 31, 32, 44, 79, 85, 87, 94, 103, 105, 113, 136, 148, 162, 170, 174,
                        178, 184, 192, 203, 217, 229, 238, 246, 269, 282, 297, 320, 343, 344, 365,
                        366, 378, 378, 383, 385, 397, 397, 409, 411, 413, 423, 428, 443, 446, 453,
                        467, 511, 533, 534, 541, 543, 546, 555, 563, 584, 587, 604, 606, 606, 620,
                        636, 642, 646, 654, 658, 658, 658, 665, 671, 673, 679, 680, 680, 681, 690,
                        695, 696, 726, 726, 729, 734, 739, 752, 768, 770, 793, 826, 838, 884, 887,
                        889, 895, 907, 908, 911, 925, 926, 963, 1010, 1015, 1033, 1042, 1091, 1095,
                        1110, 1111, 1137, 1158, 1187, 1189, 1191, 1195, 1206, 1206, 1210, 1218,
                        1221, 1227, 1235, 1243, 1245, 1255, 1259, 1261, 1263, 1271, 1314, 1326,
                        1351, 1353, 1364, 1370, 1383, 1386, 1397, 1424, 1439, 1440, 1441, 1452,
                        1454, 1459, 1462, 1479, 1515, 1539, 1562, 1575, 1622, 1625, 1633, 1637,
                        1642, 1646, 1649, 1677, 1679, 1681, 1703, 1712, 1751, 1751, 1753, 1767,
                        1778, 1780, 1780, 1806, 1809, 1820, 1832, 1854, 1871, 1882, 1906, 1911,
                        1913, 1918, 1937, 1956, 1960, 1974, 1977, 14749, 72971, 4239, 44523, 45652,
                        80177, 90504, 1271, 9784, 51753, 73667, 9114, 51423, 20063, 52619, 48923,
                        63739, 27921, 43209, 5599, 21046, 33022, 5191, 93584, 88702, 54793, 82722,
                        83912, 91546, 78494, 64226, 76577, 24862, 11367, 71127, 39785, 59429, 92687,
                        30150, 67404, 54419, 79258, 91494, 80616, 42570, 90319, 9041, 60384, 90519,
                        3997, 76726, 99220, 12751, 44598, 50608, 84162, 63093, 35665, 50235, 19086,
                        92232, 79352, 22047, 47917, 33501, 282, 33042, 22782, 82981, 47669, 50529,
                        48273, 7009, 35694, 8939, 2959, 16557, 88266, 46530, 76844, 92426, 16380,
                        16996, 38140, 16268, 45950, 50157, 39070, 76023, 50427, 65726, 17724, 53488,
                        67285, 21659, 75713, 84580, 84036, 99247, 56938, 3940, 534, 15701, 72855,
                        89432, 82902, 91290, 91117, 26402, 7413, 28303, 42066, 53235, 89508, 58840,
                        71995, 42348, 397, 44353, 31636, 38671, 77734, 38482, 85797, 15380, 11028,
                        69418, 55678, 92722, 56180, 49532, 97499, 44320, 75073, 1649, 89038, 53716,
                        62558, 27561, 13449, 97346, 46695, 89089, 82008, 23984, 24982, 24266, 85763,
                        92922, 77029, 26226, 19655, 84179, 70727, 72524, 23312, 54366, 62841, 86527,
                        10335, 93719, 83249, 8624, 25792, 1210, 51968, 47780, 41473, 55970, 89640,
                        55146, 7630, 62121, 39629, 33872, 53194, 79797, 30231, 80059, 16539, 77756,
                        31312, 17443, 49439, 27411, 73763, 428, 91633, 56970, 45728, 80129, 55493,
                        34224, 4271, 50511, 7881, 82080, 52039, 11206, 39015, 9580, 11308, 52667,
                        92305, 38164, 78147, 91565, 86168, 55523, 13470, 48455, 78488, 86418, 73991,
                        19604, 30053, 79333, 18636, 65203, 4446, 63431, 76793, 70534, 71298, 1187,
                        44297, 24863, 92677, 77833, 90020, 34783, 79322, 76331, 98096, 17858, 53247,
                        58367, 43415, 32122, 37857, 88345, 98671, 60256, 3919, 71336, 72063, 55475,
                        5061, 95687, 24891, 95433, 83787, 69597, 95223, 13503, 5982, 42636, 89081,
                        11124, 10809, 21126, 57807, 49920, 73688, 24777, 56426, 54710, 22879, 3410,
                        61459, 84468, 62598, 44059, 60644, 40100, 47360, 46245, 34055, 30232, 30974,
                        67572, 52505, 46761, 61392, 67472, 8645, 77524, 18044, 26167, 52282, 77045,
                        62119, 15971, 39497, 2912, 20105, 11236, 31672, 58099, 44247, 58653, 38255,
                        39872, 69857, 71099, 10454, 55979, 59916, 85453, 8333, 79253, 91980, 72081,
                        42971, 25125, 43525, 11621, 80641, 28954, 59868, 92981, 62221, 94044, 82924,
                        86962, 49309, 23723, 85550, 31876, 40634, 43015, 39810, 32137, 85770, 81744,
                        21751, 21590, 18230, 681, 52461, 33275, 72018, 82426, 60347, 16498, 24141,
                        32547, 20604, 38886, 4147, 44426, 27866, 17552, 56818, 15703, 76878, 52308,
                        35052, 79639, 63416, 17476, 67619, 14952, 87490, 4110, 82953, 80326, 52852,
                        13966, 70361, 64034, 33871, 82479, 37252, 95744, 56664, 96437, 6298, 10102,
                        99798, 98481, 20872, 74723, 38314, 76673, 91592, 28349, 64337, 97717, 85664,
                        12417, 89006, 41696, 28670, 55076, 62657, 92359, 98270, 10559, 35337, 28706,
                        33790, 76041, 654, 41536, 32824, 83050, 29550, 1452, 85744, 55225, 93073,
                        38608, 43353, 42478, 73307, 29642, 76869, 77420, 66043, 18915, 78979, 89785,
                        78442, 40296, 91995, 77293, 37613, 67482, 74634, 42616, 91702, 21990, 68159,
                        70955, 21254, 75365, 85758, 51831, 36295, 35644, 50352, 45593, 59701, 64171,
                        42514, 4786, 68902, 29255, 67714, 54347, 94554, 65221, 24199, 13298, 88665,
                        46682, 88620, 36790, 77625, 33821, 68888, 43506, 5813, 92017, 58840, 23575,
                        51216, 23513, 4547, 22515, 60021, 793, 96070, 69253, 76389, 56934, 94685,
                        9677, 84970, 29274, 69371, 64972, 37462, 44946, 48633, 64916, 42822, 32485,
                        72624, 84131, 79304, 29741, 99254, 12254, 12732, 86037, 56217, 69682, 46221,
                        78752, 14984, 25658, 9767, 61808, 74804, 51410, 48411, 47734, 10449, 86607,
                        6182, 33925, 1424, 93044, 37225, 36056, 1646, 82745, 6412, 77425, 5820,
                        26341, 30458, 44795, 25536, 90287, 25211, 39604, 85462, 27545, 39000, 11450,
                        35096, 41723, 58160, 94458, 67401, 82870, 41036, 55675, 96971, 17690, 4239,
                        9770, 32851, 65166, 35344, 77046, 59860, 75064, 45211, 39402, 28038, 89010,
                        63227, 78835, 72376, 17372, 6870, 34639, 42578, 46892, 12308, 69486, 85509,
                        24517, 17697, 84846, 55029, 62253, 58016, 5075, 30768, 17161, 54151, 15546,
                        13243, 90247, 33234, 93798, 43561, 73222, 54069, 16092, 77258, 79977, 16789,
                        88518, 62443, 66912, 14706, 11913, 85913, 8898, 76168, 57692, 84216, 59283,
                        58724, 69886, 80151, 75242, 47964, 4478, 85013, 43977, 84250, 66624, 33119,
                        76438, 30532, 70369, 68818, 5672, 49175, 13058, 31266, 99197, 84422, 30569,
                        3755, 58402, 43923, 94445, 92426, 15052, 89673, 34427, 63201, 70156, 58095,
                        94430, 6794, 98135, 53293, 2282, 38921, 77061, 47434, 71413, 51953, 6059,
                        52667, 89390, 36054, 98194, 75747, 88855, 87231, 51759, 49003, 76004, 3121,
                        52234, 7393, 12181, 20459, 23225, 67487, 23929, 88708, 37733, 38468, 95059,
                        21331, 48065, 44914, 30231, 4460, 68762, 84100, 15617, 6227, 62211, 5099,
                        82334, 22864, 34321, 14843, 46183, 85923, 35635, 23032, 60854, 60677, 47123,
                        63968, 29889, 90885, 71403, 86640, 45664, 44095, 56671, 24591, 86589, 74539,
                        84004, 8688, 81418, 14026, 45309, 72160, 63971, 89015, 91658, 59701, 1137,
                        45181, 69452, 98168, 53779, 35991, 25796, 75943, 47625, 70061, 58492, 91967,
                        70996, 99435, 62504, 14845, 89540, 63705, 1255, 83627, 9554, 80563, 5840,
                        39125, 50722, 81680, 25690, 26833, 91940, 20013, 93066, 37872, 39214, 26454,
                        55785, 74142, 96539, 43681, 86902, 66493, 67424, 97268, 33345, 4855, 44381,
                        19504, 68882, 19242, 93957, 59577, 54888, 12066, 9210, 94004, 99122, 46462,
                        67309, 16074, 92978, 48006, 99181, 32375, 54271, 74688, 10822, 53308, 13735,
                        911, 42705, 34855, 82644, 50597, 63546, 907, 92381, 63168, 12763, 35562,
                        73849, 95291, 4832, 89357, 70824, 17582, 91565, 62287, 70901, 57271, 59061,
                        82687, 42848, 13666, 7867, 9473, 1033, 47851, 24984, 72662, 78900, 19165,
                        20829, 8054, 3907, 60154, 60214, 10500, 41702, 99716, 75188, 45485, 13032,
                        13162, 65406, 90556, 45210, 46472, 80289, 70832, 76001, 80703, 64512, 42058,
                        59275, 73949, 27302, 7210, 60591, 68719, 37103, 24706, 48839, 51937, 67358,
                        84411, 16109, 27532, 49814, 65294, 84189, 28473, 71033, 52329, 73763, 43818,
                        5575, 61424, 96267, 96499, 33504, 8613, 49872, 39566, 92451, 80159, 3656,
                        67586, 92261, 68252, 32847, 49436, 2058, 39019, 15977, 75855, 21659, 4130,
                        72244, 45931, 49409, 58808, 70632, 446, 56277, 56537, 92643, 74425, 39815,
                        39815, 53900, 58020, 11419, 76428, 33936, 49455, 51546, 2748, 53374, 67985,
                        66548, 85200, 10496, 81244, 24222, 94645, 7621, 62115, 84277, 18078, 88264,
                        48099, 28936, 92959, 23120, 85743, 48628, 56356, 52366, 52817, 36212, 79479,
                        79607, 73892, 99689, 35446, 27403, 98387, 42790, 84057, 80891, 8505, 84653,
                        82294, 2222, 14406, 17158, 66672, 17173, 64356, 10276, 87444, 6976, 86109,
                        192, 17236, 51317, 22802, 16735, 76922, 66975, 90543, 27353, 83231, 40298,
                        7168, 43664, 82561, 57250, 41181, 97739, 81813, 36025, 81594, 99673, 14560,
                        78953, 14726, 41217, 25405, 75966, 63596, 33921, 31783, 80850, 29330, 59010,
                        83633, 13878, 71307, 43863, 5600, 88124, 20943, 70377, 57822, 31653, 99794,
                        42252, 25717, 2307, 67556, 85830, 39692, 95113, 56157, 19490, 96075, 85993,
                        82431, 16020, 14032, 46652, 74220, 83510, 82568, 76028, 9956, 25278, 14209,
                        67960, 98674, 55236, 25827, 83642, 89939, 73760, 32541, 73295, 72177, 68198,
                        7532, 73447, 13679, 1191, 93618, 33813, 42659, 50966, 28496, 54385, 54166,
                        47961, 66307, 6511, 43685, 39362, 25489, 94913, 68507, 94495, 74471, 71363,
                        4158, 58453, 6670, 93747, 61944, 62340, 49981, 71055, 64409, 6878, 5650,
                        45302, 30604, 14478, 62839, 39696, 67745, 6545, 36277, 90043, 93504, 66233,
                        895, 86007, 97460, 63734, 40402, 47422, 43624, 82860, 5490, 3874, 9929,
                        79306, 83668, 35741, 43904, 74861, 85420, 40585, 34092, 37755, 3332, 10425,
                        55738, 93544, 76686, 91575, 45298, 94119, 3665, 56588, 28790, 61568, 68510,
                        5383, 2712, 3891, 3624, 78237, 38602, 90653, 17408, 16274, 63932, 57946,
                        34964, 58394, 39837, 64935, 79903, 78297, 65290, 55513, 20155, 92607, 44898,
                        50419, 30049, 83825, 97682, 88388, 96003, 52445, 77384, 5855, 38712, 62505,
                        93624, 26687, 81656, 61535, 51382, 10078, 95007, 54360, 68147, 21238, 43789,
                        77851, 94197, 78749, 64753, 38443, 63245, 79538, 33663, 5941, 17467, 86889,
                        57304, 32012, 32051, 93186, 32628, 29712, 24309, 48010, 89661, 47018, 60711,
                        13825, 97657, 4108, 9395, 31087, 62954, 14778, 62485, 92068, 79935, 67855,
                        78384, 72026, 11569, 50102, 17919, 99482, 90346, 80542, 74140, 58097, 95439,
                        24760, 2086, 79728, 8533, 12999, 34445, 99440, 80323, 40294, 24950, 48713,
                        45093, 20921, 21799, 19983, 74535, 27883, 54048, 8062, 43980, 43486, 49669,
                        62114, 71416, 93846, 7965, 55528, 92116, 16432, 40861, 80217, 41356, 91587,
                        51281, 91577, 81198, 24876, 53232, 82583, 10667, 27718, 81610, 89214, 15669,
                        37471, 50217, 99392, 83085, 54616, 8777, 48608, 48344, 21901, 39019, 32691,
                        11109, 5637, 1637, 60392, 38666, 28500, 12632, 99413, 39902, 68790, 49317,
                        90663, 80204, 32171, 38071, 36324, 82912, 48184, 23347, 8942, 8986, 99405,
                        27642, 7839, 53125, 8338, 50637, 55882, 68391, 16773, 90940, 38937, 91079,
                        21367, 81208, 47539, 88102, 85721, 1479, 55119, 38059, 4820, 33294, 9921,
                        65232, 78060, 82867, 82914, 99005, 36113, 39506, 84207, 11246, 52339, 62080,
                        15711, 47086, 51576, 33195, 50972, 94331, 29351, 37932, 79188, 78844, 99167,
                        88084, 29558, 23543, 84921, 47448, 41319, 90706, 69036, 67877, 68067, 46583,
                        55695, 84283, 86996, 37559, 75586, 60090, 58556, 68438, 10286, 63054, 48177,
                        17925, 61798, 70025, 23654, 88022, 53910, 69634, 94564, 66040, 92051, 39919,
                        75707, 76826, 18040, 93580, 40610, 70592, 72284, 87649, 54367, 83849, 94561,
                        17709, 57744, 8990, 6951, 44905, 70956, 36482, 96216, 56886, 6838, 65419,
                        94911, 95156, 11096, 92013, 74199, 75814, 90259, 22526, 57338, 29492, 78171,
                        76512, 20641, 94388, 45554, 4155, 35630, 28832, 5299, 57954, 77875, 48208,
                        604, 71245, 63261, 44509, 37788, 60748}, 423, 0);
    }

    public static void main(String[] args) {
        String clazz = new Object() {
        }.getClass().getEnclosingClass().getSimpleName();
        org.junit.runner.JUnitCore.main(clazz);
    }
}
